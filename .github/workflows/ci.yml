name: Continuous Integration & Deployment (ACA)

on:
  push:
    branches: [ "main" ]
  pull_requests:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

concurrency:
  group: deploy-aca-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Verify lockfile exists (prevent npm ci failure)
        run: |
          if [ ! -f package-lock.json ]; then
            echo "❌ package-lock.json is missing. Run 'npm install' locally and commit it."
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build (optional)
        run: npm run build 2>/dev/null || echo "No build script found, skipping"

      - name: Run unit tests (JUnit)
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: npm run test:ci || npm test --if-present

      - name: Publish test results to Checks
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30

  deploy-to-azure:
    runs-on: ubuntu-latest
    needs: build-and-test    # لا يشتغل إلا بعد ما تخلص الاختبارات بنجاح

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build & Push Docker image, then Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          # مسار السورس
          appSourcePath: ${{ github.workspace }}
          # لو Dockerfile مو في الجذر فعل السطر التالي وحدد المسار:
          # dockerfilePath: ./Dockerfile

          # Docker Hub
          registryUrl: docker.io
          registryUsername: ${{ secrets.DOCKERHUB_USERNAME }}
          registryPassword: ${{ secrets.DOCKERHUB_TOKEN }}

          # Azure Resources (طابق الأسماء مع مواردك في Azure)
          resourceGroup: container-labs-rg-alyzedi
          containerAppName: frontendapp-alyzedi

          # اسم الصورة + التاق (SHA لكل commit)
          imageToBuild: ${{ secrets.DOCKERHUB_USERNAME }}/frontendapp-node:${{ github.sha }}
